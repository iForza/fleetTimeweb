document.addEventListener('DOMContentLoaded', () => {
    console.log("üöÄ Farm Monitor Pro - Smart Map –∑–∞–ø—É—â–µ–Ω");

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let map, view, graphicsLayer;
    let mapMode = 'demo'; // 'esri' –∏–ª–∏ 'demo'
    let mqttClient = null;
    const vehicleGraphics = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏
    let Point, Graphic, PictureMarkerSymbol, PopupTemplate; // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Esri –º–æ–¥—É–ª–µ–π

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadSettingsAndConnect();
    checkInternetAndLoadMap();

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π ---
    function checkInternetAndLoadMap() {
        showLoadingIndicator(true);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ Esri
        const esriScript = document.createElement('script');
        esriScript.src = 'https://js.arcgis.com/4.29/';
        document.head.appendChild(esriScript);

        esriScript.onload = () => {
            console.log('‚úÖ –°–∫—Ä–∏–ø—Ç—ã Esri ArcGIS –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.');
            initializeEsriMap();
        };

        esriScript.onerror = () => {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã Esri. –í–∫–ª—é—á–∞—é –¥–µ–º–æ-—Ä–µ–∂–∏–º.');
            showDemoMap();
        };
    }

    function initializeEsriMap() {
        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/Graphic",
            "esri/layers/GraphicsLayer",
            "esri/geometry/Point",
            "esri/symbols/PictureMarkerSymbol",
            "esri/PopupTemplate"
        ], (Map, MapView, EsriGraphic, EsriGraphicsLayer, EsriPoint, EsriPictureMarkerSymbol, EsriPopupTemplate) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            Point = EsriPoint;
            Graphic = EsriGraphic;
            PictureMarkerSymbol = EsriPictureMarkerSymbol;
            PopupTemplate = EsriPopupTemplate;

            map = new Map({ basemap: "satellite" });
            view = new MapView({
                container: "esriMapDiv",
                map: map,
                center: [37.6176, 55.7558],
                zoom: 10
            });
            graphicsLayer = new EsriGraphicsLayer();
            map.add(graphicsLayer);

            view.when(() => {
                console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ Esri –≥–æ—Ç–æ–≤–∞. –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç MQTT...');
                showEsriMap();
                // –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è addEsriVehicleMarkers –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            }).catch(error => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã Esri:", error);
                showDemoMap();
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –º—ã—à–∏
            const coordsWidget = document.getElementById("coordinates-info");
            view.on("pointer-move", (event) => {
                const point = view.toMap({ x: event.x, y: event.y });
                if (point) {
                    coordsWidget.innerHTML = `–®–∏—Ä: ${point.latitude.toFixed(4)}, –î–æ–ª: ${point.longitude.toFixed(4)}`;
                }
            });
        });
    }

    function showEsriMap() {
        mapMode = 'esri';
        showLoadingIndicator(false);
        document.getElementById('esriMapDiv').classList.add('active');
        document.getElementById('demoMap').classList.remove('active');
        document.getElementById('mapModeIndicator').textContent = 'üåç Esri ArcGIS (–û–Ω–ª–∞–π–Ω)';
        updateConnectionStatus('online');
    }

    function showDemoMap() {
        mapMode = 'demo';
        showLoadingIndicator(false);
        document.getElementById('esriMapDiv').classList.remove('active');
        document.getElementById('demoMap').classList.add('active');
        document.getElementById('mapModeIndicator').textContent = 'üó∫Ô∏è –î–µ–º–æ –∫–∞—Ä—Ç–∞ (–û—Ñ–ª–∞–π–Ω)';
        updateConnectionStatus('offline');
    }

    function showLoadingIndicator(show) {
        const indicator = document.getElementById('loadingIndicator');
        if (show) {
            indicator.classList.add('show');
        } else {
            indicator.classList.remove('show');
        }
    }

    function updateConnectionStatus(status) {
        const statusElement = document.getElementById('connectionStatus');
        if (status === 'online') {
            statusElement.textContent = '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∫–∞—Ä—Ç–∞';
            statusElement.className = 'status online';
        } else {
            statusElement.textContent = '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º';
            statusElement.className = 'status offline';
        }
    }

    function updateVehicleOnMap(data) {
        if (!graphicsLayer || !Point) {
            console.warn("Esri –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
            return;
        }

        const vehicleId = data.device_id;
        let vehicleGraphic = vehicleGraphics.get(vehicleId);

        const newPoint = new Point({
            longitude: data.longitude,
            latitude: data.latitude
        });

        const vehicleStatus = data.speed > 0 ? 'online' : 'offline';
        const iconUrl = createVehicleIcon("üöú", vehicleStatus);
        
        const newPopupTemplate = new PopupTemplate({
            title: `–¢–µ—Ö–Ω–∏–∫–∞: ${data.device_id}`,
            content: `
                <div style="padding: 10px; font-family: 'Segoe UI', sans-serif;">
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${vehicleStatus === 'online' ? 'üü¢ –í –¥–≤–∏–∂–µ–Ω–∏–∏' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</p>
                    <p><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${data.speed.toFixed(1)} –∫–º/—á</p>
                    <p><strong>–¢–æ–ø–ª–∏–≤–æ:</strong> ${data.fuel}%</p>
                    <p><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> ${data.temperature}¬∞C</p>
                    <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${data.latitude.toFixed(4)}, ${data.longitude.toFixed(4)}</p>
                    <p><small>Timestamp: ${new Date(data.timestamp).toLocaleString()}</small></p>
                </div>
            `
        });

        if (vehicleGraphic) {
            // –ú–∞—Ä–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            vehicleGraphic.geometry = newPoint;
            vehicleGraphic.popupTemplate = newPopupTemplate;
            vehicleGraphic.symbol.url = iconUrl;
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è ${vehicleId}`);
        } else {
            // –ú–∞—Ä–∫–µ—Ä–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            const newMarkerSymbol = new PictureMarkerSymbol({
                url: iconUrl,
                width: "32px",
                height: "32px"
            });

            vehicleGraphic = new Graphic({
                geometry: newPoint,
                symbol: newMarkerSymbol,
                popupTemplate: newPopupTemplate,
                attributes: {
                    id: vehicleId
                }
            });

            graphicsLayer.add(vehicleGraphic);
            vehicleGraphics.set(vehicleId, vehicleGraphic);
            console.log(`‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è ${vehicleId}`);
        }
    }

    function createVehicleIcon(emoji, status) {
        const canvas = document.createElement('canvas');
        canvas.width = 64;
        canvas.height = 64;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = status === 'online' ? '#22C55E' : '#EF4444';
        ctx.beginPath();
        ctx.arc(32, 32, 30, 0, 2 * Math.PI);
        ctx.fill();
        ctx.font = '32px Arial';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(emoji, 32, 32);
        return canvas.toDataURL();
    }

    function showVehicleInfo(name, speed, fuel, temp) {
        const status = speed > 0 ? '–í —Å–µ—Ç–∏' : '–û—Ñ–ª–∞–π–Ω';
        const statusIcon = speed > 0 ? 'üü¢' : 'üî¥';
        showToast(`üöú ${name} | ${statusIcon} ${status} | üöÄ ${speed} –∫–º/—á`, 'info');
    }

    // --- –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showToast(message, type = 'info', duration = 4000) {
        const container = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;

        container.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'slideOut 0.5s forwards';
            setTimeout(() => toast.remove(), 500);
        }, duration);
    }
    
    // –î–æ–±–∞–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    const styleSheet = document.createElement("style")
    styleSheet.type = "text/css"
    styleSheet.innerText = `
        @keyframes slideOut {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }
    `;
    document.head.appendChild(styleSheet);


    function showConfirmation(message, onConfirm) {
        const modal = document.getElementById('confirmation-modal');
        const messageEl = document.getElementById('confirmation-message');
        const confirmBtn = document.getElementById('modal-confirm');
        const cancelBtn = document.getElementById('modal-cancel');

        messageEl.textContent = message;
        modal.classList.add('active');

        const confirmHandler = () => {
            onConfirm();
            close();
        };

        const cancelHandler = () => {
            close();
        };

        const close = () => {
            modal.classList.remove('active');
            confirmBtn.removeEventListener('click', confirmHandler);
            cancelBtn.removeEventListener('click', cancelHandler);
        };
        
        confirmBtn.addEventListener('click', confirmHandler);
        cancelBtn.addEventListener('click', cancelHandler);
    }

    // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
    window.showPage = function(pageId, event) {
        document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.getElementById(pageId + 'Page').classList.add('active');
        event.target.classList.add('active');
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${pageId}`);
    }

    // --- MQTT ---
    function loadSettingsAndConnect() {
        const settings = getMqttSettings();
        document.getElementById('mqttServer').value = settings.server;
        document.getElementById('mqttPort').value = settings.port;
        document.getElementById('mqttTopic').value = settings.topic;
        connectMQTT();
    }

    function getMqttSettings() {
        const defaults = { server: 'broker.emqx.io', port: '8084', topic: 'farm/+/data' };
        let settings = JSON.parse(localStorage.getItem('mqttSettings'));
        return settings || defaults;
    }

    function connectMQTT() {
        if (mqttClient && mqttClient.connected) {
            mqttClient.end(true);
        }
        const settings = getMqttSettings();
        const brokerUrl = `wss://${settings.server}:${settings.port}/mqtt`;
        const options = {
            clientId: 'farm_monitor_web_' + Math.random().toString(16).substr(2, 8),
            clean: true,
            connectTimeout: 10000
        };
        console.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: ${brokerUrl}`);
        updateMqttStatus('connecting', `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${settings.server}...`);
        mqttClient = mqtt.connect(brokerUrl, options);

        mqttClient.on('connect', () => {
            console.log('‚úÖ MQTT –±—Ä–æ–∫–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω!');
            updateMqttStatus('connected', `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${settings.server}`);
            const topics = [settings.topic, 'car/+/data'];
            mqttClient.subscribe(topics, (err) => {
                if (!err) console.log(`‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏: ${topics.join(', ')}`);
            });
        });

        mqttClient.on('message', (topic, message) => {
            console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ | –¢–æ–ø–∏–∫: ${topic} | –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.toString()}`);
            try {
                const data = JSON.parse(message.toString());
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (data.device_id && data.latitude && data.longitude) {
                    // –ï—Å–ª–∏ —ç—Ç–æ Esri –∫–∞—Ä—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
                    if (mapMode === 'esri') {
                        updateVehicleOnMap(data);
                    }
                    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–µ–º–æ-–∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                } else {
                    console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç MQTT:', data);
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ MQTT:', e);
            }
        });

        mqttClient.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
            updateMqttStatus('error', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            mqttClient.end();
        });

        mqttClient.on('close', () => {
            console.log('üîå MQTT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.');
            updateMqttStatus('disconnected', '–û—Ç–∫–ª—é—á–µ–Ω–æ');
        });
    }

    function updateMqttStatus(status, text) {
        const statusEl = document.getElementById('mqttStatus');
        if (statusEl) {
            statusEl.className = `settings-item mqtt-status ${status}`;
            statusEl.textContent = text;
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
    window.saveMqttSettings = function() {
        const settings = {
            server: document.getElementById('mqttServer').value,
            port: document.getElementById('mqttPort').value,
            topic: document.getElementById('mqttTopic').value
        };
        localStorage.setItem('mqttSettings', JSON.stringify(settings));
        showToast("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...", "success");
        connectMQTT();
    }

    window.testConnection = function() {
        console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
        connectMQTT();
    }

    window.refreshCharts = function() {
        const timeRange = document.getElementById('timeRange').value;
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${timeRange}`);
        showToast(`–ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "${timeRange}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`, 'info');
    }

    window.saveProfile = function() {
        const name = document.getElementById('userName').value;
        const email = document.getElementById('userEmail').value;
        const language = document.getElementById('language').value;
        console.log("üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:", { name, email, language });
        console.log("üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
        showToast("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "success");
    }

    window.exportData = function() {
        const period = document.getElementById('exportPeriod').value;
        console.log(`üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
        showToast(`–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ "${period}" –Ω–∞—á–∞—Ç.`, 'info');
    }

    window.clearData = function() {
        showConfirmation("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?", () => {
            console.log("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä localStorage
            showToast("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.", "success");
        });
    }
}); 
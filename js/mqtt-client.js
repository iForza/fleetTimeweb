/**
 * MQTT Client –¥–ª—è Farm Monitor Pro
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ EMQX Cloud –±—Ä–æ–∫–µ—Ä—É
 */

class FarmMQTTClient {
    constructor() {
        this.client = null;
        this.isConnected = false;
        this.config = {
            host: 'o0acf6a7.ala.dedicated.gcp.emqxcloud.com',
            port: 8083, // WebSocket port
            clientId: 'iforza_' + Math.random().toString(16).substr(2, 8),
            username: 'iforza',
            password: '', // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å
            topic: 'car/+/data', // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            publishTopic: 'car', // –ë–∞–∑–æ–≤—ã–π —Ç–æ–ø–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            reconnectPeriod: 3000,
            connectTimeout: 30000,
            keepalive: 60,
            clean: true
        };
        
        this.callbacks = {
            onConnect: null,
            onDisconnect: null,
            onMessage: null,
            onError: null
        };
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É
     */
    connect(password = '') {
        if (this.client) {
            this.disconnect();
        }

        this.config.password = password;
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º MQTT.js —á–µ—Ä–µ–∑ CDN
            const options = {
                clientId: this.config.clientId,
                username: this.config.username,
                password: this.config.password,
                reconnectPeriod: this.config.reconnectPeriod,
                connectTimeout: this.config.connectTimeout,
                keepalive: this.config.keepalive,
                clean: this.config.clean,
                protocol: 'ws', // WebSocket protocol
                protocolId: 'MQTT',
                protocolVersion: 4
            };

            const brokerUrl = `ws://${this.config.host}:${this.config.port}/mqtt`;
            console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: ${brokerUrl}`);
            
            this.client = mqtt.connect(brokerUrl, options);
            
            this.client.on('connect', () => {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ EMQX Cloud MQTT –±—Ä–æ–∫–µ—Ä—É');
                this.isConnected = true;
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                this.client.subscribe(this.config.topic, (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
                    } else {
                        console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫: ${this.config.topic}`);
                    }
                });
                
                if (this.callbacks.onConnect) {
                    this.callbacks.onConnect();
                }
            });
            
            this.client.on('message', (topic, message) => {
                try {
                    const data = JSON.parse(message.toString());
                    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ${topic}:`, data);
                    
                    if (this.callbacks.onMessage) {
                        this.callbacks.onMessage(topic, data);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            });
            
            this.client.on('disconnect', () => {
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞');
                this.isConnected = false;
                
                if (this.callbacks.onDisconnect) {
                    this.callbacks.onDisconnect();
                }
            });
            
            this.client.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ MQTT:', error);
                this.isConnected = false;
                
                if (this.callbacks.onError) {
                    this.callbacks.onError(error);
                }
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MQTT –∫–ª–∏–µ–Ω—Ç–∞:', error);
            if (this.callbacks.onError) {
                this.callbacks.onError(error);
            }
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞
     */
    disconnect() {
        if (this.client) {
            this.client.end();
            this.client = null;
            this.isConnected = false;
            console.log('üîå MQTT –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
        }
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    publish(deviceId, data) {
        if (!this.isConnected || !this.client) {
            console.error('‚ùå MQTT –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            return false;
        }

        const topic = `${this.config.publishTopic}/${deviceId}/data`;
        const message = JSON.stringify({
            ...data,
            timestamp: new Date().toISOString(),
            client_id: this.config.clientId
        });

        this.client.publish(topic, message, { qos: 1 }, (error) => {
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
            } else {
                console.log(`üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ ${topic}:`, data);
            }
        });

        return true;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π
     */
    on(event, callback) {
        if (this.callbacks.hasOwnProperty(`on${event.charAt(0).toUpperCase() + event.slice(1)}`)) {
            this.callbacks[`on${event.charAt(0).toUpperCase() + event.slice(1)}`] = callback;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    getConnectionStatus() {
        return {
            connected: this.isConnected,
            clientId: this.config.clientId,
            broker: `${this.config.host}:${this.config.port}`,
            topic: this.config.topic
        };
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    sendTestData(deviceId = 'test-device') {
        const testData = {
            device_id: deviceId,
            speed: Math.round(Math.random() * 50),
            fuel: Math.round(Math.random() * 100),
            temperature: Math.round(Math.random() * 50 + 20),
            latitude: 55.7558 + (Math.random() - 0.5) * 0.01,
            longitude: 37.6176 + (Math.random() - 0.5) * 0.01,
            status: Math.random() > 0.5 ? 'active' : 'idle'
        };

        return this.publish(deviceId, testData);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FarmMQTTClient;
} else {
    window.FarmMQTTClient = FarmMQTTClient;
} 